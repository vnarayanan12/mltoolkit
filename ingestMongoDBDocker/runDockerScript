#docker run -it --rm -v C:\\Users\\User\\Documents\\FormulaTest\\input.json:/app/input.json -v C:\\Users\\User\\Documents\\FormulaTest\\:/app/ algorithm1 --fileN "input.json"
docker run -d -p 27017:27017 --name m1 mongo
docker ps
python -m pip install --upgrade pip
pip install pymongo
python ingestData.py

Result
[ObjectId('6213c1d7dcb716452efddee3'), ObjectId('6213c1d7dcb716452efddee4'), ObjectId('6213c1d7dcb716452efddee5'), ObjectId('6213c1d7dcb716452efddee6'), ObjectId('6213c1d7dcb716452efddee7'), ObjectId('6213c1d7dcb716452efddee8'), ObjectId('6213c1d7dcb716452efddee9'), ObjectId('6213c1d7dcb716452efddeea'), ObjectId('6213c1d7dcb716452efddeeb'), ObjectId('6213c1d7dcb716452efddeec'), ObjectId('6213c1d7dcb716452efddeed'), ObjectId('6213c1d7dcb716452efddeee')]

python findData.py

docker run --rm --name example.container example:0.0.1 --file-path=/app/ --mongodb-url=mongodb://root:password@mongo:27017/
  

client = MongoClient('mongodb://root:password@mongo:27017/') 

docker ps
docker inspect containerId

Change the IP in python file

docker-compose up --build
mkdir /data/db

Have a new line at the end f the file in yaml

Cd Gettinbg_started /Part 1
docker-compose up
And then download mongodb compass
Go to Mongo-Compass and click on the application 
"C:\Users\vijin\OneDrive\Documents\mongob_compass\MongoDBCompass.exe"
connection string: mongodb://root:rootpassword@localhost:27017

Download mongodb https://www.mongodb.com/try/download/community
Install complete one with compass

create C:\data\db

cd to cd to C:\Program Files\MongoDB\Server\3.2\bin>
enter command mongod
by default, mongodb server will start at port 27017

Go to Start Services and right click on MongoDb server
Open Mongodb compass 
connection string mongodb://localhost:27017


python .\ingestDataInMongoDBFromFolder.py "C:\Users\vijin\kubesamples\PythonMongoDB\pythondb\OutputH5" "mongodb://localhost:27017"
python .\ingestDataInMongoDBFromDocker.py "C:\Users\vijin\kubesamples\PythonMongoDB\pythondb\OutputH5" "mongodb://localhost:27017" "audioFiles" "files"
docker build -t ingest_mongodb:1.0.0 .
docker tag ingest_mongodb:1.0.0 XXX
docker push XXX
docker run -d -p 27017:27017 --name m1 mongo //Run mongodb conianter
docker ps
Get the container ID and inspect the IP
docker inspect containerId
docker run -it --rm -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\OutputH5\\:/app/input/ vnarayanan/ingest_mongodb:1.0.0 /bin/bash
https://www.dabbleofdevops.com/blog/setup-a-mongodb-python-docker-dev-stack

Running MongoDB as a Docker Container
docker run --name mongodb -d mongo
This command will start a MongoDB server running the latest available version in detached mode (as a background process). As a best practice, itâ€™s recommended to use a tag to specify the MongoDB version to ensure consistency.

If you need to access the MongoDB server from another application running locally, you will need to expose a port using the -p argument.
docker run --name mongodb -d -p 27017:27017 mongo

Any data created as part of the lifecycle of that container will be destroyed once the container is deleted. If you want to persist the data on 
your local machine, you can mount a volume using the -v argument.
docker run --name mongodb -d -v YOUR_LOCAL_DIR:/data/db mongo

If your application is running inside a container itself, you can run MongoDB as part of the same Docker network as your application using --network. With this method, 
you will connect to MongoDB on mongodb://mongodb:27017 from the other containerized applications in the network.
docker run --name mongodb -d --network mynetwork mongo

To initialize your MongoDB with a root user, you can use the environment variables MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD. 
These environment variables will create a user with root permissions with the specified user name and password.

docker run --name mongodb -d -e MONGO_INITDB_ROOT_USERNAME=AzureDiamond -e MONGO_INITDB_ROOT_PASSWORD=hunter2 mongo

https://www.mongodb.com/compatibility/docker

docker run -d --name MYAPP -e MONGODB_CONNSTRING=mongodb+srv://username:password@clusterURL MYAPP:1.0
docker system prune -a
docker images -f dangling=true
docker image prune
import os
connString = os.environ['MONGODB_CONNSTRING']

If you have an application and a MongoDB container both running on the same machine, you can use Docker Compose to start and stop them together

https://www.mongodb.com/blog/post/running-mongodb-as-a-microservice-with-docker-and-kubernetes

docker run --name mongodb -d -p 27017:27017 -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\mongodb_data:/data/db mongo

docker run -it --rm -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\OutputH5\\:/app/input/ ingest_mongodb:1.0.0 /bin/bash
"/app/input/" "audioFiles" "files"
docker run --name mongodb -d -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\mongodb_data:/data/db -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=root mongo
docker run --name mongodb -d -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=root mongo

docker run -it --rm -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\OutputH5\\:/app/input/ -e MONGODB_CONNSTRING=mongodb://root:root@172.17.0.2:27017 ingest_mongodb:1.0.0 /bin/bash

docker run -it --rm -v C:\\Users\\vijin\\kubesamples\\PythonMongoDB\\pythondb\\OutputH5\\:/app/input/ -e MONGODB_CONNSTRING=mongodb://root:root@172.17.0.2:27017 ingest_mongodb:1.0.0 /app/input "audio" "filenames"

View data on mongodb
docker exec -it mongodb /bin/bash
# mongosh
> show databases
> show db.collection
docker stop containerId
docker rm mongodb